The process of abstraction helps us structure our code according to our built-in human ability to think, reason and interact with complex things without having to understand all the parts that make a thing.

 

Please take a moment and look around the room you are in. You might notice a couple of different things:

Computer
Cellphone
Desk
Chair
Door
Window
 

You most likely take for granted how good your brain is at identifying an item, even if this is the first time you see that specific instance of an object. This is because our brains are good at understanding the world around us by grouping related low-level complex parts into much simpler “things”.

 

Take, for example, your computer; it consists of a range of physical parts from your keyboard, processor, motherboard, logic gates, circuit boards and even electron electrons that flow through all these. Furthermore, it also consists of several non-physical graphics shown on the screen from your cursor, buttons, taskbars and text inputs.

 

All this complexity is grouped under the simple concept known as a “computer”, which can have several properties.

Switched on or off
Processing, idle or even frozen
Fast or slow
 

We haven’t even considered more permanent properties like, whether it is a cheap, expensive laptop, desktop, PC, Mac, gaming or work computer.

 

There are also some things you can do with a computer:

Browse the internet
Write an essay
Shop on Takealot
Install a game
Design and print a flyer
Coding
 

Not only do our brains automatically take a group of related low-level complex parts and group them into simpler “things”,. You might even be curious how your brain instinctively “knows” what something is without having to inspect every element it is made from in detail until you can conclude, “I think this is maybe a door”.

 

A well-known American Psychologist, Oliver Sacks, wrote a book comically titled The Man Who Mistook His Wife for a Hat (1985) that tells a real-life story of a condition called visual agnosia in which a man lost his ability to reason about “objects” in a manner that doesn’t require considering every single part that makes up the whole. In the story, after leaving therapy, there is a brief moment when the man instinctively cannot tell the difference between his wife and his hat without carefully considering each in great detail.

 

This ability to instinctively think and talk about “objects”, whether in programming or real life, is a process of what is called “abstraction”. Abstraction is our ability to simplify entities to a core set of properties and interactions without understanding the whole.

 

Furthermore, you can identify general parts that make up these items.

Screen
Keyboard
Mouse or Touchpad
 

Each of these might further be broken down into sub-items; for example, a keyboard might consist of the following:

Enter Key
Escape Key
Arrow Keys
Spacebar
 

Furthermore, each of these keys has parts that can be further reasoned about until we get down to the physical atoms that make up the physical material these are made of (and even beyond that into the realm of quantum physics).

 

However, despite the reservations you might have about the “simplicity” of the above, it repeatedly comes up time and time again as the essential part of modern-day software development. Furthermore, often the ability to meaningfully abstract code is what separates bad software developers from good software developers.

 

Unfortunately, most developers often only learn this later on in their careers. In his seminal book, titled “Composing Software (2018)”, Eric Elliot remarks that:

 

One of my biggest regrets in life is that I failed to understand the significance of that lesson early on. I learned the essence of software design far too late in life. I have interviewed hundreds of developers. What I’ve learned from those sessions is that I’m not alone. […] If you’re a software developer, you compose functions and data structures every day, whether you know it or not. You can do it consciously (and better), or you can do it accidentally, with duct-tape and crazy glue. The process of software development is breaking down large problems into smaller problems, building components that solve those smaller problems, then composing those components together to form a complete application.